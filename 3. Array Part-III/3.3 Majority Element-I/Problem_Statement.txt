Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n/2⌋ times. You may assume that the majority element always exists in the array.

 
Example 1:
Input Format: N = 3, nums[] = {3, 2, 3}
Result: 3
Explanation: When we just count the occurrences of each number and compare with half of the size of the array,
             you will get 3 for the above solution. 

Example 2:
Input Format:  N = 7, nums[] = {2, 2, 1, 1, 1, 2, 2}
Result: 2
Explanation: After counting the number of times each element appears and comparing it with half of array size, we get 2 as result.

Example 3:
Input Format:  N = 10, nums[] = {4, 4, 2, 4, 3, 4, 4, 3, 2, 4}
Result: 4


**Constraints:**
    n == nums.length
    1 <= n <= 5 * 10^4
    -10^9 <= nums[i] <= 10^9
 
Follow-up: Could you solve the problem in linear time and in O(1) space?