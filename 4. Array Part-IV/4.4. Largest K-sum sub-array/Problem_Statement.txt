You are given an array ‘Arr’ of size ‘N’. You have to find the longest subarray of ‘Arr’, whose sum is 0.
You must return the length of the longest subarray whose sum is 0.
We can't alter the array, as it will morph the actual array and the subarrays will be incorrect.


Example 1:
Input: N = 5, and Arr[] = {1, -1, 0, 0, 1}
Output: 4
Explanation:
    We have the following subarrays with zero sums: { {1, -1}, {1, -1, 0}, {1, -1, 0, 0}, {-1, 0, 0, 1}, {0}, {0, 0}, {0} }
    Among these subarrays, {1, -1, 0, 0} & {-1, 0, 0, 1} are the longest subarrays with their sum equal to zero.
    Hence the output is 4.


Example 2:
Input: N = 6, and Arr[] = {9, -3, 3, -1, 6, -5}
Output: 5
Explanation:
    The following subarrays sum to zero: { {-3, 3} , {-1, 6, -5}, {-3, 3, -1, 6, -5} }
    Among these subarrays, {-3, 3, -1, 6, -5} is the largest subarray with their sum equal to zero.
    Hence the answer is 5.


Example 3:
Input: N = 5, and Arr[] = {1, 3, -5, 6, -2}
Output: 0
Explanation: There's no subarray whose sum is zero. Hence the output is 0.


Example 4:
Input: N = 3, and Arr[] = {1, 0, -5}
Output: 1
Explanation:
    The following Subarray adds up to zero: {0}
    Hence the output will be 1.
