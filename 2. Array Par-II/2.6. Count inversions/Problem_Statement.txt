There is an array 'A' of size 'N'.

Number of inversions in an array can be defined as the number of pairs of 'i', 'j' such that;
i < j and A[j] < A[i].

You must return the number of inversions in the array.


Example 1:
Input Format: N = 5, array[] = {1,2,3,4,5}
Result: 0
Explanation: we have a sorted array and the sorted array has 0 inversions as for i < j you will never find a pair such that
             A[j] < A[i]. More clear example: 2 has index 1 and 5 has index 4 now 1 < 5 but 2 < 5 so this is not an inversion.

Example 2:
Input Format: N = 5, array[] = {5,4,3,2,1}
Result: 10
Explanation: we have a reverse sorted array and we will get the maximum inversions as for i < j we will always find a pair such that
             A[j] < A[i]. For example 5 has index 0 and 3 has index 2 now (5,3) pair is inversion as 0 < 2 and 5 > 3 which will satisfy
             out conditions and for reverse sorted array we will get maximum inversions and that is (n)*(n-1) / 2.For above given array
             there is 4 + 3 + 2 + 1 = 10 inversions.

Example 3:
Input Format: N = 5, array[] = {5,3,2,1,4}
Result: 7
Explanation: There are 7 pairs (5,1), (5,3), (5,2), (5,4),(3,2), (3,1), (2,1) and we have left 2 pairs (2,4) and (1,4) as both will not
             satisfy our condition.


**Constraint:**
    1 <= N <= 10^5
    1 <= A[i] <= 10^9
    where, A[i] denotes the array element at 'ith' index.